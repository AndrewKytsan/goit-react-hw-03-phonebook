{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","App.module.scss","components/Filter/Filter.module.scss","components/ContactList/ContactList.module.scss","components/ContactForm/ContactForm.jsx","components/ContactItem/ContacItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","formHandler","e","preventDefault","props","onSubmit","setState","inputHandler","target","value","className","s","form","autoComplete","this","formLabel","formInput","type","pattern","required","onChange","formBtn","Component","ContactItem","contact","id","onRemoveContact","listItem","listItemText","listItemButton","onClick","ContactList","contacts","contactList","map","Filter","onFilter","filterLabel","filterInput","App","filter","addContact","find","toLowerCase","alert","uuid","prevState","removeContact","changeFilter","getFilteredContacts","includes","storedContacts","JSON","parse","localStorage","getItem","length","prevProps","setItem","stringify","container","mainTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08ec63df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"ContactForm_formInput__FMxY3\",\"formLabel\":\"ContactForm_formLabel__AarXh\",\"formBtn\":\"ContactForm_formBtn__1bq5z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactItem_listItem__3OP5j\",\"listItemText\":\"ContactItem_listItemText__1gQ3d\",\"listItemButton\":\"ContactItem_listItemButton__ZLFo6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1ksEV\",\"mainTitle\":\"App_mainTitle__1Nwvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__32cCz\",\"filterInput\":\"Filter_filterInput__p3ehn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__KqkZf\"};","import React, { Component } from 'react';\r\nimport s from './ContactForm.module.scss';\r\n\r\nexport default class ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n    formHandler = e => {\r\n        e.preventDefault();\r\n        const { name, number } = this.state;\r\n        this.props.onSubmit(name, number);\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        });\r\n    };\r\n    inputHandler = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n    render() {\r\n        return (\r\n            <form\r\n                className={s.form}\r\n                autoComplete=\"off\"\r\n                onSubmit={this.formHandler}\r\n            >\r\n                <span className={s.formLabel}>\r\n                    Name\r\n                    <br />\r\n                    <input\r\n                        className={s.formInput}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        value={this.state.name}\r\n                        required\r\n                        onChange={this.inputHandler}\r\n                    />\r\n                </span>\r\n                <br />\r\n                <span className={s.formLabel}>\r\n                    Number\r\n                    <br />\r\n                    <input\r\n                        className={s.formInput}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        value={this.state.number}\r\n                        onChange={this.inputHandler}\r\n                        required\r\n                    />\r\n                </span>\r\n                <br />\r\n                <button type=\"submit\" className={s.formBtn}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactItem.module.scss';\r\n\r\nconst ContactItem = ({ contact: { id, name, number }, onRemoveContact }) => {\r\n    return (\r\n        <li className={s.listItem}>\r\n            <p className={s.listItemText}>\r\n                {name} : {number}\r\n            </p>\r\n            <button\r\n                className={s.listItemButton}\r\n                type=\"button\"\r\n                onClick={() => onRemoveContact(id)}\r\n            >\r\n                Delete\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\n\r\nContactItem.propTypes = {\r\n    contact: PropTypes.object,\r\n    onRemoveContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.scss';\r\nimport ContactItem from '../ContactItem/ContacItem';\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => {\r\n    return (\r\n        <ul className={s.contactList}>\r\n            {contacts.map(contact => (\r\n                <ContactItem\r\n                    key={contact.id}\r\n                    contact={contact}\r\n                    onRemoveContact={onRemoveContact}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }),\r\n    ),\r\n    onRemoveContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.scss';\r\n\r\nconst Filter = ({ value, onFilter }) => {\r\n    return (\r\n        <form>\r\n            <span className={s.filterLabel}>\r\n                Find contacts by name\r\n                <br />\r\n                <input\r\n                    className={s.filterInput}\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={e => onFilter(e.target.value)}\r\n                />\r\n            </span>\r\n        </form>\r\n    );\r\n};\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { v4 as uuid } from 'uuid';\nimport s from './App.module.scss';\nexport default class App extends Component {\n    state = {\n        contacts: [],\n        filter: '',\n    };\n\n    componentDidMount() {\n        const storedContacts = JSON.parse(localStorage.getItem('contacts'));\n        storedContacts &&\n            storedContacts.length > 0 &&\n            this.setState({ contacts: storedContacts });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        prevState.contacts !== this.state.contacts &&\n            localStorage.setItem(\n                'contacts',\n                JSON.stringify(this.state.contacts),\n            );\n    }\n    addContact = (name, number) => {\n        if (\n            this.state.contacts.find(\n                contact => contact.name.toLowerCase() === name.toLowerCase(),\n            )\n        ) {\n            alert(`${name} is already in contacts`);\n            return;\n        }\n        const contact = {\n            id: uuid(),\n            name: name,\n            number: number,\n        };\n        this.setState(prevState => {\n            return { contacts: [...prevState.contacts, contact] };\n        });\n    };\n\n    removeContact = id => {\n        this.setState(prevState => {\n            return {\n                contacts: prevState.contacts.filter(\n                    contact => contact.id !== id,\n                ),\n            };\n        });\n    };\n\n    changeFilter = filter => {\n        this.setState({ filter });\n    };\n\n    getFilteredContacts = () => {\n        const { contacts, filter } = this.state;\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n    };\n\n    render() {\n        return (\n            <div className={s.container}>\n                <h1 className={s.mainTitle}>Phonebook</h1>\n\n                <ContactForm onSubmit={this.addContact} />\n\n                <h2 className={s.mainTitle}>Contacts</h2>\n                <Filter\n                    value={this.state.filter}\n                    onFilter={this.changeFilter}\n                />\n                <ContactList\n                    onRemoveContact={this.removeContact}\n                    contacts={this.getFilteredContacts()}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}